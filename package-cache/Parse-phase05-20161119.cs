'From Pharo5.0 of 16 April 2015 [Latest update: #50761] on 19 November 2016 at 6:52:37.444024 pm'!PLC_Element subclass: #PLC_ActualArgument	instanceVariableNames: 'actualArgument originalArgument '	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Elements-GraphicLanguages'!Smalltalk renameClassNamed: #PLC_VoidOpenad as: #PLC_VoidOperand!Object subclass: #PLC_VoidOperand	instanceVariableNames: 'isRequired '	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-OperandsAndAssignments'!!PLC_ActualArgument methodsFor: 'connectableBlocks' stamp: 'CarlosLombardi 11/19/2016 17:57'!addOutput	"Agrega una salida al elemento."		"la salida solo es usada para conectar el argumento al elemento que lo tiene como argumento,	 por eso le dejo nil como valor"	self outputs add: nil "PLC_VoidOperand new".! !!PLC_ActualArgument methodsFor: 'connectableBlocks' stamp: 'CarlosLombardi 11/19/2016 17:57'!addInput	"Agrega una entrada al elemento."	"la salida solo es usada para conectar el argumento al elemento que lo tiene como argumento,	 por eso le dejo nil como valor"	self inputs add: nil "PLC_VoidOperand new".! !!PLC_ActualArgument methodsFor: 'initialize-release' stamp: 'CarlosLombardi 11/19/2016 18:33'!initialize	"Inicializaciones"	super initialize.		self actualArgument: PLC_VoidOperand new.	self rememberOriginalArgument .! !!PLC_ActualArgument methodsFor: 'accessing' stamp: 'CarlosLombardi 11/19/2016 18:31'!restoreOriginalArgument	"I restore the actual argument that I had when was created "	self originalArgument ifNotNil: [:orig | self actualArgument: orig ]	! !!PLC_ActualArgument methodsFor: 'accessing' stamp: 'CarlosLombardi 11/19/2016 18:32'!rememberOriginalArgument	"I remember my current actual argument as original argument"	self originalArgument: self actualArgument	! !!PLC_ActualArgument methodsFor: 'accessing' stamp: 'CarlosLombardi 11/19/2016 18:29'!originalArgument	^ originalArgument! !!PLC_ActualArgument methodsFor: 'accessing' stamp: 'CarlosLombardi 11/19/2016 18:29'!originalArgument: anObject	originalArgument := anObject! !!PLC_ActualArgumentReader methodsFor: 'initialize-release' stamp: 'CarlosLombardi 11/19/2016 17:54'!initialize	"Inicializaciones"	super initialize.		"this is needed only to connect the argument reader with the element having this as argument,	 the actual object pointed by the output is never used"	self addOutput .! !!PLC_ActualArgumentWriter methodsFor: 'initialize-release' stamp: 'CarlosLombardi 11/19/2016 17:55'!initialize	"Inicializaciones"	super initialize.	"this is needed only to connect the argument writer with the element having this as argument,	 the actual object pointed by the input is never used"	self addInput .! !!PLC_ConnectableBlocksNetwork methodsFor: 'commands add-remove Elements' stamp: 'CarlosLombardi 11/19/2016 18:26'!changeActualArgumentFor: aPLC_ConnectableBlock by: aString	"Cambia el Actual Argument. "	"HACER: 		1 - le pase el string a su pou para que lo convierta en un objeto operando ( PARSEO )		| operand |		Devuelve un objeto que puede ser operando: variable, item de estructura, literal, o void;	o devolver nil si el string es cualquier otra cosa.		operand := self pouBody pou convertStringToOperand: aString		2a - Si es operando, le pido al elemento actual argument del bc que le llega como parametro	que cheque si le cabe que le asignen el operando. 	Este operando seguro entiende dataType y dataValue. 	Si es variable o item de estructura además se puede buscar su declaración 		Si le cabe se pone el flag de 'valorInvalido' a False en el actual argument 		Si no le cabe se pone el flag de 'valorInvalido' a True en el actual argument 			Siempre se lo asigna (cambia el texto auque se ingrese cualquier verdura), 			con el flag se determina si se dibuja en rojo o negro para indicar que se 			va a poder compilar o no.		2b - Si es nil le guarda un operando void al elemento actual argument.						LO DE ABAJO ES UN PARCHE PARA QUE SIGA ANDANDO, DESPUES HAY QUE SACAR TODO....	"			| argument cleanString |		cleanString := aString trimmed .		"si el String es vacío, lo que hay que hacer es volver al valor original"	cleanString ifEmpty: [ 		aPLC_ConnectableBlock element restoreOriginalArgument.		^true.	] .		"UPDATE 22/09/2016 - nuevo parser más bonito, que usa PetitParser."	argument := self parse: cleanString.						"new, october 2016 - operand check that can result in a different operand, or an error operand"	argument := aPLC_ConnectableBlock element check: argument in: aPLC_ConnectableBlock.	argument isError ifTrue: [ 		"Aviso en pantalla que no encontre la variable. 		 ESTA MUY MAL ACA ESTO, DEBERIA HACERLO LA VISTA"		GrowlMorph openWithLabel: 'Error' contents: argument errorText .			] .	"Cambia el argumento actual"	aPLC_ConnectableBlock element actualArgument: argument.	"este true quiere decir 'si, cambie' para que se refresque la vista.	 Se puede evaluar que devuelva false si no cambio nada, por eficiencia"	^ true.! !!PLC_Element class methodsFor: 'instance creation' stamp: 'CarlosLombardi 11/19/2016 18:34'!ActualRequiredArgumentWriter	| newArg |	newArg := PLC_ActualArgumentWriter new.	newArg actualArgument setAsRequired .	newArg rememberOriginalArgument .	^ newArg! !!PLC_Element class methodsFor: 'instance creation' stamp: 'CarlosLombardi 11/19/2016 18:33'!ActualRequiredArgumentReader	| newArg |	newArg := PLC_ActualArgumentReader new.	newArg actualArgument setAsRequired .	newArg rememberOriginalArgument .	^ newArg! !!PLC_GraphicProgramView methodsFor: 'compilation' stamp: 'CarlosLombardi 11/19/2016 18:42'!generateCode	"METODO PROVISORIO. Se lo envía el editor ladder. Sirve para mostrar en un Transcript el programa compilado."		| progAcc |		"Creo el acumulador de objetos de programa."	progAcc := PLC_ProgramAccumulator_POU new.		"Le envio la petición al controlador de que se compile en el programa de objetos"	self controller generateCodeIn: progAcc.		"Abro un Transcript y muestro las 2 compilaciones"	Transcript open ; clear.		Transcript show: '	Programa en IL:	------------------------' , progAcc compilerDataTypesDecls ilCompile ,'' ,  progAcc compilerVarDecls ilCompile ,'' , progAcc compiledBody ilCompile ,''.			Transcript show: '	Programa en C:	------------------------' , progAcc compilerDataTypesDecls cCompile ,'' ,  progAcc compilerVarDecls cCompile ,'' , progAcc compiledBody cCompile ,''.	! !!PLC_LadderNetwork methodsFor: 'commands add-remove Elements' stamp: 'CarlosLombardi 11/19/2016 18:04'!addFunctionBlockCall: aPLC_Element onConnection: aPLC_Connection	"Crea y añade un Llamado a Instancia de Bloque de Función."	| connectableBlockActualArgumentReader connectableBlockActualArgumentWriter connectableBlockFunction |	"Creo el Bloque Conectables del Bloque de Función"		connectableBlockFunction := PLC_ConnectableBlock newWithElement: aPLC_Element.	"Agrego el Bloque Conectable del LLamado a Función a la Network de Bloques Conectables"	self addBlock: connectableBlockFunction.		"Creo y conecto los bloques conectables de los Acrual Argument Reader	de sus salidas y entrada-salidas y agrego los Actual Argument Reader a	la Network de Bloques Conectables."	(2 to: aPLC_Element inputs size ) do: [ :index |		connectableBlockActualArgumentReader := PLC_ConnectableBlock 			newWithElement: PLC_Element ActualRequiredArgumentReader.		connectableBlockActualArgumentReader 			output: 1 			connectTo: connectableBlockFunction 			input: index.			self addBlock: connectableBlockActualArgumentReader.		].		"Creo y conecto los bloques conectables de los Acrual Argument Writer 	de sus salidas y entrada-salidas y agrego los Actual Argument Writer a	la Network de Bloques Conectables."	(2 to: aPLC_Element outputs size ) do: [ :index |		connectableBlockActualArgumentWriter := PLC_ConnectableBlock 			newWithElement: PLC_Element ActualArgumentWriter.		connectableBlockFunction 			output: index 			connectTo: connectableBlockActualArgumentWriter 			input: 1.			self addBlock: connectableBlockActualArgumentWriter.			].		"Conecto el nuevo elemento a los Bloques Conectables entre los 	cuales estaba la conexion donde agrego el nuevo elemento."	aPLC_Connection 		replaceConnectionByConnectingToInputPin: connectableBlockFunction inputs first 		andOutputPin: connectableBlockFunction outputs first.		^ connectableBlockFunction.! !!PLC_LadderNetwork methodsFor: 'commands add-remove Elements' stamp: 'CarlosLombardi 11/19/2016 18:01'!addCoil: aPLC_ElementCoil onConnection: aPLC_Connection	"Crea y añade una Bobina."	| connectableBlockActualArgumentWriter connectableBlockCoil |	"Creo los Bloques Conectables"		connectableBlockCoil := PLC_ConnectableBlock newWithElement: aPLC_ElementCoil.	connectableBlockActualArgumentWriter := 			PLC_ConnectableBlock newWithElement: PLC_Element ActualRequiredArgumentWriter.	"Conecto los 2 bloques conectables que forman el Elemento. 	Esta conexion no está representada por ningun Morph."	connectableBlockCoil output: 2 connectTo: connectableBlockActualArgumentWriter input: 1.		"Agrego los Bloques Conectables a la Network de Bloques Conectables"	self addBlock: connectableBlockCoil.	self addBlock: connectableBlockActualArgumentWriter.			connectableBlockCoil connectableBlocksNetwork == connectableBlockActualArgumentWriter connectableBlocksNetwork.		"Conecto el nuevo elemento a los Bloques Conectables entre los cuales estaba la conexion donde agrego el nuevo elemento."	aPLC_Connection replaceConnectionByConnectingToInputPin: connectableBlockCoil inputs first andOutputPin:  connectableBlockCoil outputs first.			^ connectableBlockCoil.! !!PLC_LadderNetwork methodsFor: 'commands add-remove Elements' stamp: 'CarlosLombardi 11/19/2016 18:04'!addFunctionCall: aPLC_Element onConnection: aPLC_Connection	"Crea y añade un Llamado a Función."	| connectableBlockActualArgumentReader connectableBlockActualArgumentWriter connectableBlockFunction |	"Creo el Bloques Conectables de la Función"		connectableBlockFunction := PLC_ConnectableBlock newWithElement: aPLC_Element.	"Agrego el Bloque Conectable del LLamado a Función a la Network de Bloques Conectables"	self addBlock: connectableBlockFunction.		"Creo y conecto los bloques conectables de los Acrual Argument Reader	de sus salidas y entrada-salidas y agrego los Actual Argument Reader a	la Network de Bloques Conectables."	(2 to: aPLC_Element inputs size ) do: [ :index |		connectableBlockActualArgumentReader := PLC_ConnectableBlock 			newWithElement: PLC_Element ActualRequiredArgumentReader.		connectableBlockActualArgumentReader 			output: 1 			connectTo: connectableBlockFunction 			input: index.			self addBlock: connectableBlockActualArgumentReader.		].		"Creo y conecto los bloques conectables de los Acrual Argument Writer 	de sus salidas y entrada-salidas y agrego los Actual Argument Writer a	la Network de Bloques Conectables."	(2 to: aPLC_Element outputs size ) do: [ :index |		connectableBlockActualArgumentWriter := PLC_ConnectableBlock 			newWithElement: PLC_Element ActualArgumentWriter.		connectableBlockFunction 			output: index 			connectTo: connectableBlockActualArgumentWriter 			input: 1.			self addBlock: connectableBlockActualArgumentWriter.			].		"Conecto el nuevo elemento a los Bloques Conectables entre los 	cuales estaba la conexion donde agrego el nuevo elemento."	aPLC_Connection 		replaceConnectionByConnectingToInputPin: connectableBlockFunction inputs first 		andOutputPin: connectableBlockFunction outputs first.		^ connectableBlockFunction.! !!PLC_LadderNetwork methodsFor: 'commands add-remove Elements' stamp: 'CarlosLombardi 11/19/2016 17:20'!addContact: aPLC_ElementContact onConnection: aPLC_Connection	"Crea y añade un Contacto."	| connectableBlockActualArgumentReader connectableBlockContact |	"Creo los Bloques Conectables"		connectableBlockContact := PLC_ConnectableBlock newWithElement: aPLC_ElementContact.	connectableBlockActualArgumentReader := 		PLC_ConnectableBlock newWithElement: PLC_Element ActualRequiredArgumentReader.	"Conecto los 2 bloques conectables que forman el Elemento. 	Esta conexion no está representada por ningun Morph."	connectableBlockActualArgumentReader output: 1 connectTo: connectableBlockContact input: 2.		"Agrego los Bloques Conectables a la Network de Bloques Conectables"	self addBlock: connectableBlockContact.	self addBlock: connectableBlockActualArgumentReader.			"Conecto el nuevo elemento a los Bloques Conectables entre los cuales estaba la conexion donde agrego el nuevo elemento."	aPLC_Connection replaceConnectionByConnectingToInputPin: (connectableBlockContact inputPinAt: 1) andOutputPin:  (connectableBlockContact outputPinAt: 1).		^ connectableBlockContact.! !!PLC_TextualPOUCall class methodsFor: 'instance creation' stamp: 'CarlosLombardi 11/19/2016 15:44'!newFromDeclaration: pouDeclaration andInstanceOperand: inst	"Crea un nuevo llamado IL a partir de la declaración pouDeclaration."	| pouCall |		pouCall := self new.		pouCall declaration: pouDeclaration.	pouCall instanceOperand: inst.	pouDeclaration inputVarDecls do: [ :each | 		pouCall inputAssignments add: 			( PLC_InputAssignment				newWithFormalParameter: each				andActtualArgument: PLC_VoidOperand new				andPouCall: pouCall			).		].	pouDeclaration inOutVarDecls do: [ :each | 		pouCall inOutAssignments add: 			( PLC_InOutAssignment				newWithFormalParameter: each				andActtualArgument: PLC_VoidOperand new				andPouCall: pouCall			).		].	pouDeclaration outputVarDecls do: [ :each | 		pouCall outputAssignments add: 			( PLC_OutputAssignment				newWithFormalParameter: each				andActtualArgument: PLC_VoidOperand new				andPouCall: pouCall			).		].		^ pouCall.! !!PLC_TextualFunctionCall class methodsFor: 'instance creation' stamp: 'CarlosLombardi 11/19/2016 15:44'!newFromDeclaration: pouDeclaration andInstanceOperand: inst	"Crea un nuevo llamado IL a partir de la declaración pouDeclaration."	| pouCall |		pouCall := self new.		pouCall declaration: pouDeclaration.	pouCall instanceOperand: inst.	pouDeclaration inputVarDecls do: [ :each | 		pouCall inputAssignments add: 			( PLC_InputAssignment				newWithFormalParameter: each				andActtualArgument: PLC_VoidOperand new				andPouCall: pouCall			).		].	pouDeclaration inOutVarDecls do: [ :each | 		pouCall inOutAssignments add: 			( PLC_InOutAssignment				newWithFormalParameter: each				andActtualArgument: PLC_VoidOperand new				andPouCall: pouCall			).		].	pouDeclaration outputVarDecls do: [ :each | 		pouCall outputAssignments add: 			( PLC_OutputAssignment				newWithFormalParameter: each				andActtualArgument: PLC_VoidOperand new				andPouCall: pouCall			).		].	pouCall returnAssignment: ( 		PLC_OutputAssignment			newWithFormalParameter: pouDeclaration return			andActtualArgument: PLC_VoidOperand new			andPouCall: pouCall		).		^ pouCall.! !!PLC_VoidOperand methodsFor: 'testing' stamp: 'CarlosLombardi 11/19/2016 17:03'!isError	"Devuelve true si es error"	^ self isRequired! !!PLC_VoidOperand methodsFor: 'accessing' stamp: 'CarlosLombardi 11/19/2016 17:03'!setAsRequired	"I set myself as a required operand"	isRequired := true ! !!PLC_VoidOperand methodsFor: 'accessing' stamp: 'CarlosLombardi 11/19/2016 17:03'!setAsNotRequired	"I set myself as a not required operand"	isRequired := false! !!PLC_VoidOperand methodsFor: 'accessing' stamp: 'CarlosLombardi 11/19/2016 17:02'!isRequired	"whether I am a required operand"	^isRequired! !!PLC_VoidOperand methodsFor: 'initialization-release' stamp: 'CarlosLombardi 11/19/2016 17:11'!initialize	"I prepare myself for life"	super initialize .	isRequired := false .! !!PLC_VoidOperand class methodsFor: 'instance creation' stamp: 'CarlosLombardi 11/19/2016 17:08'!newRequired	"create and answer a new void operand for a required argument"	^self new setAsRequired ; yourself ! !!PLC_VoidOperand class reorganize!(#'instance creation' newRequired)!Object subclass: #PLC_VoidOperand	instanceVariableNames: 'isRequired'	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-OperandsAndAssignments'!!PLC_VoidOperand reorganize!(#testing isError isPLCLiteral isVaraible isStructItem isVoid)(#compilation dataType dataValue identifier cCompile ilCompile)(#accessing setAsRequired setAsNotRequired isRequired)(#'initialization-release' initialize)!PLC_ActualArgument removeSelector: #addRequiredInput!PLC_ActualArgument removeSelector: #addRequiredOutput!PLC_Element subclass: #PLC_ActualArgument	instanceVariableNames: 'actualArgument originalArgument'	classVariableNames: ''	poolDictionaries: ''	category: 'IDE4PLC-Elements-GraphicLanguages'!